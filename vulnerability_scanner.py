#!/usr/bin/env python3
"""
Vulnerability Scanner for Homework 5
Scans localhost for open ports and attempts HTTP/SSH authentication
"""

import socket
import base64
import paramiko
import argparse
import sys
import time
import logging
from urllib.parse import quote

# Try to import nmap, fall back to socket scanning if not available
try:
    import nmap
    NMAP_AVAILABLE = True
except ImportError:
    NMAP_AVAILABLE = False

# Suppress paramiko logging
logging.getLogger("paramiko").setLevel(logging.CRITICAL)

def scan_ports(host='127.0.0.1', verbose=False):
    """Scan for open TCP ports on localhost, ignoring ports 9000+"""
    if verbose:
        print(f"Scanning {host} for open TCP ports...")
    
    open_ports = []
    
    if NMAP_AVAILABLE:
        # Use nmap for comprehensive scanning
        if verbose:
            print("Using nmap for port scanning...")
        
        try:
            nm = nmap.PortScanner()
            # Scan ports 1-8999 (excluding 9000+)
            scan_result = nm.scan(host, '1-8999', arguments='-sT --max-retries 1 --host-timeout 30s')
            
            if host in nm.all_hosts():
                for port in nm[host]['tcp']:
                    if nm[host]['tcp'][port]['state'] == 'open':
                        open_ports.append(port)
                        if verbose:
                            print(f"Found open port: {port}")
        except Exception as e:
            if verbose:
                print(f"Nmap scan failed: {e}, falling back to socket scanning...")
            # Fall back to socket scanning
            open_ports = _socket_scan_ports(host, verbose)
    else:
        # Fall back to socket scanning
        if verbose:
            print("Nmap not available, using socket scanning...")
        open_ports = _socket_scan_ports(host, verbose)
    
    return open_ports

def _socket_scan_ports(host='127.0.0.1', verbose=False):
    """Fallback socket-based port scanning"""
    open_ports = []
    # Scan common ports and a range of ports
    common_ports = [22, 23, 25, 53, 80, 110, 143, 443, 993, 995, 8080, 8081, 2222, 2223, 2224, 3000, 3001, 5000, 5001, 8000, 8001, 8888]
    
    for port in common_ports:
        if port >= 9000:  # Skip ports 9000 and higher
            continue
            
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex((host, port))
            if result == 0:
                open_ports.append(port)
                if verbose:
                    print(f"Found open port: {port}")
            sock.close()
        except Exception:
            pass
    
    return open_ports

def test_http_auth(host, port, username, password, verbose=False):
    """Test HTTP basic authentication on a given port"""
    if verbose:
        print(f"Testing HTTP authentication on {host}:{port} with {username}:{password}")
    
    try:
        # Create socket connection
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        sock.connect((host, port))
        
        # Create HTTP request with basic auth
        auth_string = base64.b64encode(f"{username}:{password}".encode()).decode()
        request = f"GET / HTTP/1.1\r\nHost: {host}:{port}\r\nAuthorization: Basic {auth_string}\r\nConnection: close\r\n\r\n"
        
        sock.send(request.encode())
        
        # Read response
        response = sock.recv(4096).decode('utf-8', errors='ignore')
        sock.close()
        
        # Check if authentication was successful (HTTP 200)
        if "200 OK" in response:
            # Extract the response body (after double CRLF)
            if "\r\n\r\n" in response:
                body = response.split("\r\n\r\n", 1)[1].strip()
                return body
        return None
        
    except Exception as e:
        if verbose:
            print(f"HTTP test failed: {e}")
        return None

def test_ssh_auth(host, port, username, password, verbose=False):
    """Test SSH password authentication on a given port"""
    if verbose:
        print(f"Testing SSH authentication on {host}:{port} with {username}:{password}")
    
    try:
        # Create SSH client
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        # Suppress paramiko logging
        import logging
        logging.getLogger("paramiko").setLevel(logging.CRITICAL)
        
        # Set timeout
        client.connect(host, port=port, username=username, password=password, timeout=5)
        
        # Try to get a channel and read output
        transport = client.get_transport()
        if transport:
            channel = transport.open_session()
            if channel:
                # Wait a bit for any server output
                time.sleep(0.5)
                if channel.recv_ready():
                    output = channel.recv(1024).decode('utf-8', errors='ignore').strip()
                    channel.close()
                    client.close()
                    return output
                channel.close()
        
        client.close()
        return "success"  # Default success message if no specific output
        
    except Exception as e:
        if verbose:
            print(f"SSH test failed: {e}")
        return None

def main():
    parser = argparse.ArgumentParser(description='Vulnerability Scanner for localhost')
    parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbose output')
    args = parser.parse_args()
    
    # Credentials to test
    credentials = {
        'admin': 'admin',
        'root': 'abc123',
        'skroob': '12345'
    }
    
    host = '127.0.0.1'
    
    # Scan for open ports
    open_ports = scan_ports(host, args.verbose)
    
    if not open_ports:
        if args.verbose:
            print("No open ports found")
        return
    
    # Test each open port with HTTP and SSH
    for port in open_ports:
        if args.verbose:
            print(f"Testing port {port}...")
        
        # Test HTTP authentication
        for username, password in credentials.items():
            result = test_http_auth(host, port, username, password, args.verbose)
            if result:
                # Format output as RFC 3986 URI
                uri = f"http://{quote(username)}:{quote(password)}@{host}:{port}"
                print(f"{uri} {result}")
        
        # Test SSH authentication
        for username, password in credentials.items():
            result = test_ssh_auth(host, port, username, password, args.verbose)
            if result:
                # Format output as RFC 3986 URI
                uri = f"ssh://{quote(username)}:{quote(password)}@{host}:{port}"
                print(f"{uri} {result}")

if __name__ == "__main__":
    main()
